{"ast":null,"code":"/**\n * Copyright 2014-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactElementValidator\n */\n\n/**\n * ReactElementValidator provides a wrapper around a element factory\n * which validates the props passed to the element. This is intended to be\n * used only in DEV and could be replaced by a static type checker for languages\n * that support it.\n */\n'use strict';\n\nvar ReactElement = require('./ReactElement');\n\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');\n\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\n\nvar canDefineProperty = require('./canDefineProperty');\n\nvar getIteratorFn = require('./getIteratorFn');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar warning = require('fbjs/lib/warning');\n\nfunction getDeclarationErrorAddendum() {\n  if (ReactCurrentOwner.current) {\n    var name = ReactCurrentOwner.current.getName();\n\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n\n  return '';\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\nvar loggedTypeFailures = {};\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\nfunction validateExplicitKey(element, parentType) {\n  if (!element._store || element._store.validated || element.key != null) {\n    return;\n  }\n\n  element._store.validated = true;\n  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);\n\n  if (addenda === null) {\n    // we already showed the warning\n    return;\n  }\n\n  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique \"key\" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : void 0;\n}\n/**\n * Shared warning and monitoring code for the key warnings.\n *\n * @internal\n * @param {string} messageType A key used for de-duping warnings.\n * @param {ReactElement} element Component that requires a key.\n * @param {*} parentType element's parent's type.\n * @returns {?object} A set of addenda to use in the warning message, or null\n * if the warning has already been shown before (and shouldn't be shown again).\n */\n\n\nfunction getAddendaForKeyUse(messageType, element, parentType) {\n  var addendum = getDeclarationErrorAddendum();\n\n  if (!addendum) {\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n    if (parentName) {\n      addendum = ' Check the top-level render call using <' + parentName + '>.';\n    }\n  }\n\n  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});\n\n  if (memoizer[addendum]) {\n    return null;\n  }\n\n  memoizer[addendum] = true;\n  var addenda = {\n    parentOrOwner: addendum,\n    url: ' See https://fb.me/react-warning-keys for more information.',\n    childOwner: null\n  }; // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n    // Give the component that originally created this child.\n    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';\n  }\n\n  return addenda;\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  if (typeof node !== 'object') {\n    return;\n  }\n\n  if (Array.isArray(node)) {\n    for (var i = 0; i < node.length; i++) {\n      var child = node[i];\n\n      if (ReactElement.isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (ReactElement.isValidElement(node)) {\n    // This element was passed in a valid location.\n    if (node._store) {\n      node._store.validated = true;\n    }\n  } else if (node) {\n    var iteratorFn = getIteratorFn(node); // Entry iterators provide implicit keys.\n\n    if (iteratorFn) {\n      if (iteratorFn !== node.entries) {\n        var iterator = iteratorFn.call(node);\n        var step;\n\n        while (!(step = iterator.next()).done) {\n          if (ReactElement.isValidElement(step.value)) {\n            validateExplicitKey(step.value, parentType);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Assert that the props are valid\n *\n * @param {string} componentName Name of the component for error messages.\n * @param {object} propTypes Map of prop name to a ReactPropType\n * @param {object} props\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @private\n */\n\n\nfunction checkPropTypes(componentName, propTypes, props, location) {\n  for (var propName in propTypes) {\n    if (propTypes.hasOwnProperty(propName)) {\n      var error; // Prop type validation may throw. In case they do, we don't want to\n      // fail the render phase where it didn't fail before. So we log it.\n      // After these have been cleaned up, we'll let them throw.\n\n      try {\n        // This is intentionally an invariant that gets caught. It's the same\n        // behavior as without this statement except with a better message.\n        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : void 0;\n        error = propTypes[propName](props, propName, componentName, location);\n      } catch (ex) {\n        error = ex;\n      }\n\n      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : void 0;\n\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n        // Only monitor this failure once because there tends to be a lot of the\n        // same error.\n        loggedTypeFailures[error.message] = true;\n        var addendum = getDeclarationErrorAddendum();\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : void 0;\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  var componentClass = element.type;\n\n  if (typeof componentClass !== 'function') {\n    return;\n  }\n\n  var name = componentClass.displayName || componentClass.name;\n\n  if (componentClass.propTypes) {\n    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);\n  }\n\n  if (typeof componentClass.getDefaultProps === 'function') {\n    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;\n  }\n}\n\nvar ReactElementValidator = {\n  createElement: function (type, props, children) {\n    var validType = typeof type === 'string' || typeof type === 'function'; // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : void 0;\n    var element = ReactElement.createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      for (var i = 2; i < arguments.length; i++) {\n        validateChildKeys(arguments[i], type);\n      }\n    }\n\n    validatePropTypes(element);\n    return element;\n  },\n  createFactory: function (type) {\n    var validatedFactory = ReactElementValidator.createElement.bind(null, type); // Legacy hook TODO: Warn if this is accessed\n\n    validatedFactory.type = type;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (canDefineProperty) {\n        Object.defineProperty(validatedFactory, 'type', {\n          enumerable: false,\n          get: function () {\n            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;\n            Object.defineProperty(this, 'type', {\n              value: type\n            });\n            return type;\n          }\n        });\n      }\n    }\n\n    return validatedFactory;\n  },\n  cloneElement: function (element, props, children) {\n    var newElement = ReactElement.cloneElement.apply(this, arguments);\n\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], newElement.type);\n    }\n\n    validatePropTypes(newElement);\n    return newElement;\n  }\n};\nmodule.exports = ReactElementValidator;","map":{"version":3,"names":["ReactElement","require","ReactPropTypeLocations","ReactPropTypeLocationNames","ReactCurrentOwner","canDefineProperty","getIteratorFn","invariant","warning","getDeclarationErrorAddendum","current","name","getName","ownerHasKeyUseWarning","loggedTypeFailures","validateExplicitKey","element","parentType","_store","validated","key","addenda","getAddendaForKeyUse","process","env","NODE_ENV","parentOrOwner","childOwner","url","messageType","addendum","parentName","displayName","memoizer","_owner","validateChildKeys","node","Array","isArray","i","length","child","isValidElement","iteratorFn","entries","iterator","call","step","next","done","value","checkPropTypes","componentName","propTypes","props","location","propName","hasOwnProperty","error","ex","Error","message","validatePropTypes","componentClass","type","prop","getDefaultProps","isReactClassApproved","ReactElementValidator","createElement","children","validType","apply","arguments","createFactory","validatedFactory","bind","Object","defineProperty","enumerable","get","cloneElement","newElement","module","exports"],"sources":["C:/Users/richk/Documents/GitHub/LetsMeet/client/node_modules/react-bar-chart/node_modules/react/lib/ReactElementValidator.js"],"sourcesContent":["/**\n * Copyright 2014-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactElementValidator\n */\n\n/**\n * ReactElementValidator provides a wrapper around a element factory\n * which validates the props passed to the element. This is intended to be\n * used only in DEV and could be replaced by a static type checker for languages\n * that support it.\n */\n\n'use strict';\n\nvar ReactElement = require('./ReactElement');\nvar ReactPropTypeLocations = require('./ReactPropTypeLocations');\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\n\nvar canDefineProperty = require('./canDefineProperty');\nvar getIteratorFn = require('./getIteratorFn');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nfunction getDeclarationErrorAddendum() {\n  if (ReactCurrentOwner.current) {\n    var name = ReactCurrentOwner.current.getName();\n    if (name) {\n      return ' Check the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\nvar ownerHasKeyUseWarning = {};\n\nvar loggedTypeFailures = {};\n\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\nfunction validateExplicitKey(element, parentType) {\n  if (!element._store || element._store.validated || element.key != null) {\n    return;\n  }\n  element._store.validated = true;\n\n  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);\n  if (addenda === null) {\n    // we already showed the warning\n    return;\n  }\n  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique \"key\" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : void 0;\n}\n\n/**\n * Shared warning and monitoring code for the key warnings.\n *\n * @internal\n * @param {string} messageType A key used for de-duping warnings.\n * @param {ReactElement} element Component that requires a key.\n * @param {*} parentType element's parent's type.\n * @returns {?object} A set of addenda to use in the warning message, or null\n * if the warning has already been shown before (and shouldn't be shown again).\n */\nfunction getAddendaForKeyUse(messageType, element, parentType) {\n  var addendum = getDeclarationErrorAddendum();\n  if (!addendum) {\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n    if (parentName) {\n      addendum = ' Check the top-level render call using <' + parentName + '>.';\n    }\n  }\n\n  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});\n  if (memoizer[addendum]) {\n    return null;\n  }\n  memoizer[addendum] = true;\n\n  var addenda = {\n    parentOrOwner: addendum,\n    url: ' See https://fb.me/react-warning-keys for more information.',\n    childOwner: null\n  };\n\n  // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n    // Give the component that originally created this child.\n    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';\n  }\n\n  return addenda;\n}\n\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\nfunction validateChildKeys(node, parentType) {\n  if (typeof node !== 'object') {\n    return;\n  }\n  if (Array.isArray(node)) {\n    for (var i = 0; i < node.length; i++) {\n      var child = node[i];\n      if (ReactElement.isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (ReactElement.isValidElement(node)) {\n    // This element was passed in a valid location.\n    if (node._store) {\n      node._store.validated = true;\n    }\n  } else if (node) {\n    var iteratorFn = getIteratorFn(node);\n    // Entry iterators provide implicit keys.\n    if (iteratorFn) {\n      if (iteratorFn !== node.entries) {\n        var iterator = iteratorFn.call(node);\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (ReactElement.isValidElement(step.value)) {\n            validateExplicitKey(step.value, parentType);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Assert that the props are valid\n *\n * @param {string} componentName Name of the component for error messages.\n * @param {object} propTypes Map of prop name to a ReactPropType\n * @param {object} props\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @private\n */\nfunction checkPropTypes(componentName, propTypes, props, location) {\n  for (var propName in propTypes) {\n    if (propTypes.hasOwnProperty(propName)) {\n      var error;\n      // Prop type validation may throw. In case they do, we don't want to\n      // fail the render phase where it didn't fail before. So we log it.\n      // After these have been cleaned up, we'll let them throw.\n      try {\n        // This is intentionally an invariant that gets caught. It's the same\n        // behavior as without this statement except with a better message.\n        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : void 0;\n        error = propTypes[propName](props, propName, componentName, location);\n      } catch (ex) {\n        error = ex;\n      }\n      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : void 0;\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n        // Only monitor this failure once because there tends to be a lot of the\n        // same error.\n        loggedTypeFailures[error.message] = true;\n\n        var addendum = getDeclarationErrorAddendum();\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : void 0;\n      }\n    }\n  }\n}\n\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\nfunction validatePropTypes(element) {\n  var componentClass = element.type;\n  if (typeof componentClass !== 'function') {\n    return;\n  }\n  var name = componentClass.displayName || componentClass.name;\n  if (componentClass.propTypes) {\n    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);\n  }\n  if (typeof componentClass.getDefaultProps === 'function') {\n    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;\n  }\n}\n\nvar ReactElementValidator = {\n\n  createElement: function (type, props, children) {\n    var validType = typeof type === 'string' || typeof type === 'function';\n    // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : void 0;\n\n    var element = ReactElement.createElement.apply(this, arguments);\n\n    // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n    if (element == null) {\n      return element;\n    }\n\n    // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n    if (validType) {\n      for (var i = 2; i < arguments.length; i++) {\n        validateChildKeys(arguments[i], type);\n      }\n    }\n\n    validatePropTypes(element);\n\n    return element;\n  },\n\n  createFactory: function (type) {\n    var validatedFactory = ReactElementValidator.createElement.bind(null, type);\n    // Legacy hook TODO: Warn if this is accessed\n    validatedFactory.type = type;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (canDefineProperty) {\n        Object.defineProperty(validatedFactory, 'type', {\n          enumerable: false,\n          get: function () {\n            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;\n            Object.defineProperty(this, 'type', {\n              value: type\n            });\n            return type;\n          }\n        });\n      }\n    }\n\n    return validatedFactory;\n  },\n\n  cloneElement: function (element, props, children) {\n    var newElement = ReactElement.cloneElement.apply(this, arguments);\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], newElement.type);\n    }\n    validatePropTypes(newElement);\n    return newElement;\n  }\n\n};\n\nmodule.exports = ReactElementValidator;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIC,sBAAsB,GAAGD,OAAO,CAAC,0BAAD,CAApC;;AACA,IAAIE,0BAA0B,GAAGF,OAAO,CAAC,8BAAD,CAAxC;;AACA,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,qBAAD,CAA/B;;AAEA,IAAII,iBAAiB,GAAGJ,OAAO,CAAC,qBAAD,CAA/B;;AACA,IAAIK,aAAa,GAAGL,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIM,SAAS,GAAGN,OAAO,CAAC,oBAAD,CAAvB;;AACA,IAAIO,OAAO,GAAGP,OAAO,CAAC,kBAAD,CAArB;;AAEA,SAASQ,2BAAT,GAAuC;EACrC,IAAIL,iBAAiB,CAACM,OAAtB,EAA+B;IAC7B,IAAIC,IAAI,GAAGP,iBAAiB,CAACM,OAAlB,CAA0BE,OAA1B,EAAX;;IACA,IAAID,IAAJ,EAAU;MACR,OAAO,kCAAkCA,IAAlC,GAAyC,IAAhD;IACD;EACF;;EACD,OAAO,EAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,IAAIE,qBAAqB,GAAG,EAA5B;AAEA,IAAIC,kBAAkB,GAAG,EAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,mBAAT,CAA6BC,OAA7B,EAAsCC,UAAtC,EAAkD;EAChD,IAAI,CAACD,OAAO,CAACE,MAAT,IAAmBF,OAAO,CAACE,MAAR,CAAeC,SAAlC,IAA+CH,OAAO,CAACI,GAAR,IAAe,IAAlE,EAAwE;IACtE;EACD;;EACDJ,OAAO,CAACE,MAAR,CAAeC,SAAf,GAA2B,IAA3B;EAEA,IAAIE,OAAO,GAAGC,mBAAmB,CAAC,WAAD,EAAcN,OAAd,EAAuBC,UAAvB,CAAjC;;EACA,IAAII,OAAO,KAAK,IAAhB,EAAsB;IACpB;IACA;EACD;;EACDE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCjB,OAAO,CAAC,KAAD,EAAQ,wEAAwE,QAAhF,EAA0Fa,OAAO,CAACK,aAAR,IAAyB,EAAnH,EAAuHL,OAAO,CAACM,UAAR,IAAsB,EAA7I,EAAiJN,OAAO,CAACO,GAAR,IAAe,EAAhK,CAA/C,GAAqN,KAAK,CAA1N;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASN,mBAAT,CAA6BO,WAA7B,EAA0Cb,OAA1C,EAAmDC,UAAnD,EAA+D;EAC7D,IAAIa,QAAQ,GAAGrB,2BAA2B,EAA1C;;EACA,IAAI,CAACqB,QAAL,EAAe;IACb,IAAIC,UAAU,GAAG,OAAOd,UAAP,KAAsB,QAAtB,GAAiCA,UAAjC,GAA8CA,UAAU,CAACe,WAAX,IAA0Bf,UAAU,CAACN,IAApG;;IACA,IAAIoB,UAAJ,EAAgB;MACdD,QAAQ,GAAG,6CAA6CC,UAA7C,GAA0D,IAArE;IACD;EACF;;EAED,IAAIE,QAAQ,GAAGpB,qBAAqB,CAACgB,WAAD,CAArB,KAAuChB,qBAAqB,CAACgB,WAAD,CAArB,GAAqC,EAA5E,CAAf;;EACA,IAAII,QAAQ,CAACH,QAAD,CAAZ,EAAwB;IACtB,OAAO,IAAP;EACD;;EACDG,QAAQ,CAACH,QAAD,CAAR,GAAqB,IAArB;EAEA,IAAIT,OAAO,GAAG;IACZK,aAAa,EAAEI,QADH;IAEZF,GAAG,EAAE,6DAFO;IAGZD,UAAU,EAAE;EAHA,CAAd,CAf6D,CAqB7D;EACA;EACA;;EACA,IAAIX,OAAO,IAAIA,OAAO,CAACkB,MAAnB,IAA6BlB,OAAO,CAACkB,MAAR,KAAmB9B,iBAAiB,CAACM,OAAtE,EAA+E;IAC7E;IACAW,OAAO,CAACM,UAAR,GAAqB,iCAAiCX,OAAO,CAACkB,MAAR,CAAetB,OAAf,EAAjC,GAA4D,GAAjF;EACD;;EAED,OAAOS,OAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASc,iBAAT,CAA2BC,IAA3B,EAAiCnB,UAAjC,EAA6C;EAC3C,IAAI,OAAOmB,IAAP,KAAgB,QAApB,EAA8B;IAC5B;EACD;;EACD,IAAIC,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAJ,EAAyB;IACvB,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;MACpC,IAAIE,KAAK,GAAGL,IAAI,CAACG,CAAD,CAAhB;;MACA,IAAIvC,YAAY,CAAC0C,cAAb,CAA4BD,KAA5B,CAAJ,EAAwC;QACtC1B,mBAAmB,CAAC0B,KAAD,EAAQxB,UAAR,CAAnB;MACD;IACF;EACF,CAPD,MAOO,IAAIjB,YAAY,CAAC0C,cAAb,CAA4BN,IAA5B,CAAJ,EAAuC;IAC5C;IACA,IAAIA,IAAI,CAAClB,MAAT,EAAiB;MACfkB,IAAI,CAAClB,MAAL,CAAYC,SAAZ,GAAwB,IAAxB;IACD;EACF,CALM,MAKA,IAAIiB,IAAJ,EAAU;IACf,IAAIO,UAAU,GAAGrC,aAAa,CAAC8B,IAAD,CAA9B,CADe,CAEf;;IACA,IAAIO,UAAJ,EAAgB;MACd,IAAIA,UAAU,KAAKP,IAAI,CAACQ,OAAxB,EAAiC;QAC/B,IAAIC,QAAQ,GAAGF,UAAU,CAACG,IAAX,CAAgBV,IAAhB,CAAf;QACA,IAAIW,IAAJ;;QACA,OAAO,CAAC,CAACA,IAAI,GAAGF,QAAQ,CAACG,IAAT,EAAR,EAAyBC,IAAjC,EAAuC;UACrC,IAAIjD,YAAY,CAAC0C,cAAb,CAA4BK,IAAI,CAACG,KAAjC,CAAJ,EAA6C;YAC3CnC,mBAAmB,CAACgC,IAAI,CAACG,KAAN,EAAajC,UAAb,CAAnB;UACD;QACF;MACF;IACF;EACF;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkC,cAAT,CAAwBC,aAAxB,EAAuCC,SAAvC,EAAkDC,KAAlD,EAAyDC,QAAzD,EAAmE;EACjE,KAAK,IAAIC,QAAT,IAAqBH,SAArB,EAAgC;IAC9B,IAAIA,SAAS,CAACI,cAAV,CAAyBD,QAAzB,CAAJ,EAAwC;MACtC,IAAIE,KAAJ,CADsC,CAEtC;MACA;MACA;;MACA,IAAI;QACF;QACA;QACA,EAAE,OAAOL,SAAS,CAACG,QAAD,CAAhB,KAA+B,UAAjC,IAA+CjC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwClB,SAAS,CAAC,KAAD,EAAQ,sEAAsE,kBAA9E,EAAkG6C,aAAa,IAAI,aAAnH,EAAkIjD,0BAA0B,CAACoD,QAAD,CAA5J,EAAwKC,QAAxK,CAAjD,GAAqOjD,SAAS,CAAC,KAAD,CAA7R,GAAuS,KAAK,CAA5S;QACAmD,KAAK,GAAGL,SAAS,CAACG,QAAD,CAAT,CAAoBF,KAApB,EAA2BE,QAA3B,EAAqCJ,aAArC,EAAoDG,QAApD,CAAR;MACD,CALD,CAKE,OAAOI,EAAP,EAAW;QACXD,KAAK,GAAGC,EAAR;MACD;;MACDpC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCjB,OAAO,CAAC,CAACkD,KAAD,IAAUA,KAAK,YAAYE,KAA5B,EAAmC,oEAAoE,+DAApE,GAAsI,iEAAtI,GAA0M,gEAA1M,GAA6Q,iCAAhT,EAAmVR,aAAa,IAAI,aAApW,EAAmXjD,0BAA0B,CAACoD,QAAD,CAA7Y,EAAyZC,QAAzZ,EAAma,OAAOE,KAA1a,CAA/C,GAAke,KAAK,CAAve;;MACA,IAAIA,KAAK,YAAYE,KAAjB,IAA0B,EAAEF,KAAK,CAACG,OAAN,IAAiB/C,kBAAnB,CAA9B,EAAsE;QACpE;QACA;QACAA,kBAAkB,CAAC4C,KAAK,CAACG,OAAP,CAAlB,GAAoC,IAApC;QAEA,IAAI/B,QAAQ,GAAGrB,2BAA2B,EAA1C;QACAc,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCjB,OAAO,CAAC,KAAD,EAAQ,uBAAR,EAAiCkD,KAAK,CAACG,OAAvC,EAAgD/B,QAAhD,CAA/C,GAA2G,KAAK,CAAhH;MACD;IACF;EACF;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgC,iBAAT,CAA2B9C,OAA3B,EAAoC;EAClC,IAAI+C,cAAc,GAAG/C,OAAO,CAACgD,IAA7B;;EACA,IAAI,OAAOD,cAAP,KAA0B,UAA9B,EAA0C;IACxC;EACD;;EACD,IAAIpD,IAAI,GAAGoD,cAAc,CAAC/B,WAAf,IAA8B+B,cAAc,CAACpD,IAAxD;;EACA,IAAIoD,cAAc,CAACV,SAAnB,EAA8B;IAC5BF,cAAc,CAACxC,IAAD,EAAOoD,cAAc,CAACV,SAAtB,EAAiCrC,OAAO,CAACsC,KAAzC,EAAgDpD,sBAAsB,CAAC+D,IAAvE,CAAd;EACD;;EACD,IAAI,OAAOF,cAAc,CAACG,eAAtB,KAA0C,UAA9C,EAA0D;IACxD3C,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCjB,OAAO,CAACuD,cAAc,CAACG,eAAf,CAA+BC,oBAAhC,EAAsD,+DAA+D,kEAArH,CAA/C,GAA0O,KAAK,CAA/O;EACD;AACF;;AAED,IAAIC,qBAAqB,GAAG;EAE1BC,aAAa,EAAE,UAAUL,IAAV,EAAgBV,KAAhB,EAAuBgB,QAAvB,EAAiC;IAC9C,IAAIC,SAAS,GAAG,OAAOP,IAAP,KAAgB,QAAhB,IAA4B,OAAOA,IAAP,KAAgB,UAA5D,CAD8C,CAE9C;IACA;;IACAzC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCjB,OAAO,CAAC+D,SAAD,EAAY,0EAA0E,mEAA1E,GAAgJ,+BAA5J,EAA6L9D,2BAA2B,EAAxN,CAA/C,GAA6Q,KAAK,CAAlR;IAEA,IAAIO,OAAO,GAAGhB,YAAY,CAACqE,aAAb,CAA2BG,KAA3B,CAAiC,IAAjC,EAAuCC,SAAvC,CAAd,CAN8C,CAQ9C;IACA;;IACA,IAAIzD,OAAO,IAAI,IAAf,EAAqB;MACnB,OAAOA,OAAP;IACD,CAZ6C,CAc9C;IACA;IACA;IACA;IACA;;;IACA,IAAIuD,SAAJ,EAAe;MACb,KAAK,IAAIhC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkC,SAAS,CAACjC,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;QACzCJ,iBAAiB,CAACsC,SAAS,CAAClC,CAAD,CAAV,EAAeyB,IAAf,CAAjB;MACD;IACF;;IAEDF,iBAAiB,CAAC9C,OAAD,CAAjB;IAEA,OAAOA,OAAP;EACD,CA9ByB;EAgC1B0D,aAAa,EAAE,UAAUV,IAAV,EAAgB;IAC7B,IAAIW,gBAAgB,GAAGP,qBAAqB,CAACC,aAAtB,CAAoCO,IAApC,CAAyC,IAAzC,EAA+CZ,IAA/C,CAAvB,CAD6B,CAE7B;;IACAW,gBAAgB,CAACX,IAAjB,GAAwBA,IAAxB;;IAEA,IAAIzC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACzC,IAAIpB,iBAAJ,EAAuB;QACrBwE,MAAM,CAACC,cAAP,CAAsBH,gBAAtB,EAAwC,MAAxC,EAAgD;UAC9CI,UAAU,EAAE,KADkC;UAE9CC,GAAG,EAAE,YAAY;YACfzD,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCjB,OAAO,CAAC,KAAD,EAAQ,2DAA2D,qCAAnE,CAA/C,GAA2J,KAAK,CAAhK;YACAqE,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,MAA5B,EAAoC;cAClC5B,KAAK,EAAEc;YAD2B,CAApC;YAGA,OAAOA,IAAP;UACD;QAR6C,CAAhD;MAUD;IACF;;IAED,OAAOW,gBAAP;EACD,CArDyB;EAuD1BM,YAAY,EAAE,UAAUjE,OAAV,EAAmBsC,KAAnB,EAA0BgB,QAA1B,EAAoC;IAChD,IAAIY,UAAU,GAAGlF,YAAY,CAACiF,YAAb,CAA0BT,KAA1B,CAAgC,IAAhC,EAAsCC,SAAtC,CAAjB;;IACA,KAAK,IAAIlC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkC,SAAS,CAACjC,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;MACzCJ,iBAAiB,CAACsC,SAAS,CAAClC,CAAD,CAAV,EAAe2C,UAAU,CAAClB,IAA1B,CAAjB;IACD;;IACDF,iBAAiB,CAACoB,UAAD,CAAjB;IACA,OAAOA,UAAP;EACD;AA9DyB,CAA5B;AAkEAC,MAAM,CAACC,OAAP,GAAiBhB,qBAAjB"},"metadata":{},"sourceType":"script"}